name: Build AX3600 Increase
on:
  repository_dispatch:
  workflow_dispatch:

env:
  TZ: Asia/Jakarta

jobs:
    build:
        name: Build AX3600 image
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                repository: dimfishr/openwrt
                ref: ipq807x-5.15-pr-increase

            - name: Update and install feeds
              run: |
                ./scripts/feeds update -a
                ./scripts/feeds install -a

            - name: Add custom feeds
              run :
                git clone https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon

            - name: Generate config for AX3600
              run: |
                echo "CONFIG_TARGET_ipq807x=y" > .config
                echo "CONFIG_TARGET_ipq807x_generic=y\n" >> .config
                echo "CONFIG_TARGET_ipq807x_generic_DEVICE_xiaomi_ax3600=y\n" >> .config
                echo "CONFIG_TARGET_ROOTFS_INITRAMFS=y\n" >> .config
                echo "CONFIG_TARGET_INITRAMFS_COMPRESSION_ZSTD=y\n" >> .config
                echo "CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND=y\n" >> .config
                echo "CONFIG_PACKAGE_luci=y\n" >> .config
                echo "CONFIG_PACKAGE_wpad-basic-wolfssl=m\n" >> .config
                echo "CONFIG_PACKAGE_wpad-wolfssl=y\n" >> .config
                #CUSTOM CONFIG
                echo "CONFIG_PACKAGE_curl=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-ipt-nat=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-nf-conntrack-netlink=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-qca-nss-dp=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-qca-nss-drv-bridge-mgr=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-qca-nss-drv-pppoe=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-qca-nss-drv-vlan-mgr=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-qca-nss-drv=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-qca-nss-ecm=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-tun=y\n" >> .config
                echo "CONFIG_PACKAGE_libip4tc2=y\n" >> .config
                echo "CONFIG_PACKAGE_libip6tc2=y\n" >> .config
                echo "CONFIG_PACKAGE_librt=y\n" >> .config
                echo "CONFIG_PACKAGE_libstdcpp6=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-argon-config=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-mwan3=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-mwan3helper=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-pppoe-relay=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-pptp-server=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-sqm=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-base=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-compat=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-proto-relay=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-theme-argon=y\n" >> .config
                echo "CONFIG_PACKAGE_mwan3=y\n" >> .config
                echo "CONFIG_PACKAGE_nss-firmware-ipq8074=y\n" >> .config
                echo "CONFIG_PACKAGE_relayd=y\n" >> .config
                echo "CONFIG_PACKAGE_rpcd-mod-ucode=y\n" >> .config
                echo "CONFIG_PACKAGE_wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_zerotier=y\n" >> .config
                make defconfig

            - name: Enable WiFi by default
              run: |
                mkdir -p files/etc/uci-defaults
                cat > files/etc/uci-defaults/xxx_config << EOF
                uci set wireless.radio1.band='5g'
                uci set wireless.radio1.channel='auto'
                uci set wireless.radio1.country='ID'
                uci set wireless.radio1.disabled='0'
                uci set wireless.radio1.distance='30'
                uci set wireless.radio1.htmode='HE80'
                uci set wireless.radio1.txpower='30'
                uci set wireless.radio1=wifi-device
                uci set wireless.default_radio1=wifi-iface
                uci set wireless.default_radio1.device='radio1'
                uci set wireless.default_radio1.network='lan'
                uci set wireless.default_radio1.mode='ap'
                uci set wireless.default_radio1.ssid='OpenWrt 5Ghz'
                uci set wireless.default_radio1.encryption='psk2'
                uci set wireless.default_radio1.key='20HAA0BL1BJ'
                uci set wireless.radio2.band='2g'
                uci set wireless.radio2.channel='auto'
                uci set wireless.radio2.country='ID'
                uci set wireless.radio2.disabled='0'
                uci set wireless.radio2.distance='150'
                uci set wireless.radio2.htmode='HE40'
                uci set wireless.radio2.txpower='30'
                uci set wireless.radio2=wifi-device
                uci set wireless.default_radio2=wifi-iface
                uci set wireless.default_radio2.device='radio2'
                uci set wireless.default_radio2.network='lan'
                uci set wireless.default_radio2.mode='ap'
                uci set wireless.default_radio2.ssid='OpenWrt 2.4Ghz'
                uci set wireless.default_radio2.encryption='psk2'
                uci set wireless.default_radio2.key='20HAA0BL1BJ'
                uci set system.@system[0].hostname='OpenWrt_AX3600'
                uci set system.@system[0].description='Xiaomi AX3600 With OpenWrt'
                uci set system.@system[0].zonename='Asia/Jakarta'
                uci set system.@system[0].timezone='WIB-7'
                uci commit
                EOF

            - name: Download package sources
              run: make download V=s

            - name: Build tools
              run: |
                make tools/install -j$(nproc) V=s || \
                make tools/install V=s

            - name: Build toolchain
              run: |
                make toolchain/install -j$(nproc) V=s || \
                make toolchain/install V=s

            - name: Build target images
              run: |
                make -j$(nproc) V=s || \
                make V=s

            - name: TAR output
              run: tar -cvf ipq807xx-images.tar bin/targets/ipq807x/generic

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                name: ipq807x-images
                path: ipq807xx-images.tar

    release:
          name: Make a release
          runs-on: ubuntu-latest
          needs: build

          steps:
            - name: Download the image artifacts
              uses: actions/download-artifact@v2
              with:
                name: ipq807x-images

            - name: Extract the image artifacts
              run: tar xf ipq807xx-images.tar

            - name: Get the current date
              run: echo "NOW=$(date +%F-%H%M)" >> $GITHUB_ENV

            - name: Create a release
              uses: "lauravuo/action-automatic-releases@test-changes"
              with:
                repo_token: "${{ secrets.GITHUB_TOKEN }}"
                prerelease: true
                title: "Updated prebuilt images ${{ env.NOW }}"
                automatic_release_tag: "ipq807x-${{ env.NOW }}"
                auto_generate_release_notes: true
                files: bin/targets/ipq807x/generic/*
